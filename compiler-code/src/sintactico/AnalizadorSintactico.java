
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.*;
import lexico.AnalizadorLexico;
import lenguaje.*;
import lenguaje.VariableParametro.*;
import lenguaje.ExpresionSimple.*;
import lenguaje.Instruccion.*;
import lenguaje.Tipo.*;
import lenguaje.Tipo.TipoStruct.ClaseAux;
import java.util.*;
import exc.GestionExcepciones;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\006\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\002\000\002\004\006" +
    "\000\002\004\004\000\002\004\002\000\002\005\005\000" +
    "\002\005\003\000\002\005\003\000\002\007\003\000\002" +
    "\007\005\000\002\007\004\000\002\007\006\000\002\010" +
    "\006\000\002\010\005\000\002\010\003\000\002\011\004" +
    "\000\002\011\003\000\002\012\003\000\002\012\007\000" +
    "\002\013\002\000\002\006\006\000\002\006\005\000\002" +
    "\006\003\000\002\014\004\000\002\014\003\000\002\015" +
    "\015\000\002\015\011\000\002\016\003\000\002\016\002" +
    "\000\002\017\005\000\002\017\003\000\002\017\003\000" +
    "\002\020\004\000\002\020\005\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\006\000\002\027\004\000\002\027\002" +
    "\000\002\023\004\000\002\024\010\000\002\024\012\000" +
    "\002\025\010\000\002\026\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\004\000\002\031" +
    "\005\000\002\031\003\000\002\032\005\000\002\032\003" +
    "\000\002\032\003\000\002\033\005\000\002\033\003\000" +
    "\002\034\005\000\002\034\003\000\002\035\004\000\002" +
    "\035\003\000\002\036\005\000\002\036\003\000\002\037" +
    "\005\000\002\037\003\000\002\040\005\000\002\040\003" +
    "\000\002\045\003\000\002\045\003\000\002\041\003\000" +
    "\002\041\004\000\002\041\005\000\002\041\006\000\002" +
    "\042\005\000\002\042\003\000\002\042\003\000\002\043" +
    "\006\000\002\046\005\000\002\046\003\000\002\046\002" +
    "\000\002\046\003\000\002\047\006\000\002\047\005\000" +
    "\002\047\003\000\002\044\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\006\003\006\027\004\001\002\000\012\015" +
    "\ufffd\021\ufffd\023\ufffd\034\ufffd\001\002\000\004\002\007" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\000\001" +
    "\002\000\012\015\013\021\011\023\012\034\uffeb\001\002" +
    "\000\004\046\150\001\002\000\006\015\013\034\uffeb\001" +
    "\002\000\006\003\uffed\004\uffed\001\002\000\004\034\132" +
    "\001\002\000\006\003\022\004\017\001\002\000\006\003" +
    "\uffee\004\uffee\001\002\000\014\003\026\017\027\022\ufff6" +
    "\031\030\041\ufff6\001\002\000\006\022\023\041\024\001" +
    "\002\000\006\022\ufff8\041\ufff8\001\002\000\006\022\ufff7" +
    "\041\ufff7\001\002\000\004\004\017\001\002\000\012\015" +
    "\ufffe\021\ufffe\023\ufffe\034\ufffe\001\002\000\006\022\ufff9" +
    "\041\ufff9\001\002\000\014\017\ufff0\022\ufff0\031\ufff0\040" +
    "\ufff0\041\ufff0\001\002\000\004\006\130\001\002\000\014" +
    "\004\045\005\042\006\046\035\060\037\047\001\002\000" +
    "\012\017\032\022\ufff4\031\033\041\ufff4\001\002\000\004" +
    "\006\125\001\002\000\006\003\034\032\036\001\002\000" +
    "\006\022\uffca\041\uffca\001\002\000\006\022\ufff3\041\ufff3" +
    "\001\002\000\016\003\056\004\045\005\042\006\046\035" +
    "\060\037\047\001\002\000\010\022\uffc8\033\uffc8\036\071" +
    "\001\002\000\016\016\uffc1\022\uffc1\033\uffc1\036\uffc1\040" +
    "\uffc1\041\uffc1\001\002\000\026\012\uffb2\013\uffb2\014\uffb2" +
    "\016\uffb2\020\uffb2\022\uffb2\033\uffb2\036\uffb2\040\uffb2\041" +
    "\uffb2\001\002\000\026\012\uffa8\013\uffa8\014\uffa8\016\uffa8" +
    "\020\uffa8\022\uffa8\033\uffa8\036\uffa8\040\uffa8\041\uffa8\001" +
    "\002\000\022\012\123\013\117\016\uffbf\022\uffbf\033\uffbf" +
    "\036\uffbf\040\uffbf\041\uffbf\001\002\000\016\016\uffc3\022" +
    "\uffc3\033\uffc3\036\uffc3\040\uffc3\041\uffc3\001\002\000\036" +
    "\003\076\012\uffb8\013\uffb8\014\uffb8\016\uffb8\017\075\020" +
    "\uffb8\022\uffb8\026\100\033\uffb8\036\uffb8\037\101\040\uffb8" +
    "\041\uffb8\001\002\000\026\012\uffa9\013\uffa9\014\uffa9\016" +
    "\uffa9\020\uffa9\022\uffa9\033\uffa9\036\uffa9\040\uffa9\041\uffa9" +
    "\001\002\000\014\004\045\005\042\006\046\035\060\037" +
    "\047\001\002\000\026\012\uffb3\013\uffb3\014\uffb3\016\uffb3" +
    "\020\uffb3\022\uffb3\033\uffb3\036\uffb3\040\uffb3\041\uffb3\001" +
    "\002\000\006\022\066\033\067\001\002\000\026\012\uffb9" +
    "\013\uffb9\014\uffb9\016\uffb9\020\uffb9\022\uffb9\033\uffb9\036" +
    "\uffb9\040\uffb9\041\uffb9\001\002\000\026\012\uffba\013\uffba" +
    "\014\uffba\016\uffba\020\uffba\022\uffba\033\uffba\036\uffba\040" +
    "\uffba\041\uffba\001\002\000\026\012\uffbb\013\uffbb\014\uffbb" +
    "\016\uffbb\020\uffbb\022\uffbb\033\uffbb\036\uffbb\040\uffbb\041" +
    "\uffbb\001\002\000\026\012\uffbd\013\uffbd\014\064\016\uffbd" +
    "\020\uffbd\022\uffbd\033\uffbd\036\uffbd\040\uffbd\041\uffbd\001" +
    "\002\000\006\022\uffc7\033\uffc7\001\002\000\016\016\062" +
    "\022\uffc5\033\uffc5\036\uffc5\040\uffc5\041\uffc5\001\002\000" +
    "\014\004\045\005\042\006\046\035\060\037\047\001\002" +
    "\000\016\016\uffc2\022\uffc2\033\uffc2\036\uffc2\040\uffc2\041" +
    "\uffc2\001\002\000\014\004\045\005\042\006\046\035\060" +
    "\037\047\001\002\000\016\016\uffc4\022\uffc4\033\uffc4\036" +
    "\uffc4\040\uffc4\041\uffc4\001\002\000\012\004\045\005\042" +
    "\006\046\037\047\001\002\000\026\012\uffbc\013\uffbc\014" +
    "\uffbc\016\uffbc\020\uffbc\022\uffbc\033\uffbc\036\uffbc\040\uffbc" +
    "\041\uffbc\001\002\000\014\004\045\005\042\006\046\035" +
    "\060\037\047\001\002\000\006\022\uffcb\041\uffcb\001\002" +
    "\000\010\022\uffc9\033\uffc9\036\071\001\002\000\014\004" +
    "\045\005\042\006\046\035\060\037\047\001\002\000\016" +
    "\016\062\022\uffc6\033\uffc6\036\uffc6\040\uffc6\041\uffc6\001" +
    "\002\000\006\036\071\040\074\001\002\000\026\012\uffb4" +
    "\013\uffb4\014\uffb4\016\uffb4\020\uffb4\022\uffb4\033\uffb4\036" +
    "\uffb4\040\uffb4\041\uffb4\001\002\000\012\004\045\005\042" +
    "\006\046\037\047\001\002\000\042\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\022\uffaa\026\uffaa\031\uffaa\033\uffaa\036\uffaa\040\uffaa\041" +
    "\uffaa\001\002\000\042\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\016\uffb7\017\112\020\uffb7\022\uffb7\026" +
    "\113\031\uffb7\033\uffb7\036\uffb7\040\uffb7\041\uffb7\001\002" +
    "\000\004\004\110\001\002\000\022\003\103\004\045\005" +
    "\042\006\046\022\uffae\035\060\037\047\040\uffae\001\002" +
    "\000\010\022\uffaf\036\071\040\uffaf\001\002\000\006\022" +
    "\uffad\040\uffad\001\002\000\006\022\105\040\106\001\002" +
    "\000\014\004\045\005\042\006\046\035\060\037\047\001" +
    "\002\000\026\012\uffb1\013\uffb1\014\uffb1\016\uffb1\020\uffb1" +
    "\022\uffb1\033\uffb1\036\uffb1\040\uffb1\041\uffb1\001\002\000" +
    "\010\022\uffb0\036\071\040\uffb0\001\002\000\044\003\076" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\016" +
    "\uffb8\017\075\020\uffb8\022\uffb8\026\100\031\uffb8\033\uffb8" +
    "\036\uffb8\040\uffb8\041\uffb8\001\002\000\036\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\016\uffb6\020\uffb6" +
    "\022\uffb6\031\uffb6\033\uffb6\036\uffb6\040\uffb6\041\uffb6\001" +
    "\002\000\012\004\045\005\042\006\046\037\047\001\002" +
    "\000\004\004\110\001\002\000\036\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\020\uffb5\022\uffb5" +
    "\031\uffb5\033\uffb5\036\uffb5\040\uffb5\041\uffb5\001\002\000" +
    "\006\013\117\020\116\001\002\000\042\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\016\uffac\017\uffac\020" +
    "\uffac\022\uffac\026\uffac\031\uffac\033\uffac\036\uffac\040\uffac" +
    "\041\uffac\001\002\000\012\004\045\005\042\006\046\037" +
    "\047\001\002\000\026\012\uffbe\013\uffbe\014\064\016\uffbe" +
    "\020\uffbe\022\uffbe\033\uffbe\036\uffbe\040\uffbe\041\uffbe\001" +
    "\002\000\006\013\117\020\122\001\002\000\042\007\uffab" +
    "\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\016\uffab\017" +
    "\uffab\020\uffab\022\uffab\026\uffab\031\uffab\033\uffab\036\uffab" +
    "\040\uffab\041\uffab\001\002\000\012\004\045\005\042\006" +
    "\046\037\047\001\002\000\020\013\117\016\uffc0\022\uffc0" +
    "\033\uffc0\036\uffc0\040\uffc0\041\uffc0\001\002\000\004\020" +
    "\126\001\002\000\014\017\ufff2\022\ufff2\031\ufff2\040\ufff2" +
    "\041\ufff2\001\002\000\010\022\ufff5\036\071\041\ufff5\001" +
    "\002\000\004\020\131\001\002\000\014\017\ufff1\022\ufff1" +
    "\031\ufff1\040\ufff1\041\ufff1\001\002\000\004\032\133\001" +
    "\002\000\012\003\134\015\013\023\012\034\uffeb\001\002" +
    "\000\012\015\uffe8\023\uffe8\033\uffe8\034\uffe8\001\002\000" +
    "\004\004\143\001\002\000\012\015\013\023\012\033\140" +
    "\034\uffeb\001\002\000\004\004\141\001\002\000\006\003" +
    "\uffec\004\uffec\001\002\000\004\041\142\001\002\000\012" +
    "\015\uffea\023\uffea\033\uffea\034\uffea\001\002\000\004\041" +
    "\144\001\002\000\012\015\uffe9\023\uffe9\033\uffe9\034\uffe9" +
    "\001\002\000\006\003\uffef\004\uffef\001\002\000\006\002" +
    "\001\046\150\001\002\000\006\002\uffe6\046\uffe6\001\002" +
    "\000\010\015\013\034\uffeb\044\152\001\002\000\004\004" +
    "\237\001\002\000\004\004\153\001\002\000\004\037\154" +
    "\001\002\000\014\003\157\015\013\023\012\034\uffeb\040" +
    "\uffe2\001\002\000\006\022\235\040\uffe3\001\002\000\006" +
    "\022\uffe0\040\uffe0\001\002\000\006\022\uffdf\040\uffdf\001" +
    "\002\000\004\040\164\001\002\000\004\004\162\001\002" +
    "\000\012\003\026\017\027\022\uffde\040\uffde\001\002\000" +
    "\010\017\032\022\uffdd\040\uffdd\001\002\000\004\032\166" +
    "\001\002\000\032\002\uffe4\003\uffe4\004\uffe4\015\uffe4\023" +
    "\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\042\uffe4\045\uffe4" +
    "\046\uffe4\001\002\000\026\003\ufffa\004\ufffa\015\ufffa\023" +
    "\ufffa\030\ufffa\032\ufffa\033\ufffa\034\ufffa\045\ufffa\046\ufffa" +
    "\001\002\000\026\003\uffd5\004\uffd5\015\013\023\012\030" +
    "\uffd5\032\uffd5\033\uffd5\034\uffeb\045\uffd5\046\150\001\002" +
    "\000\016\003\205\004\110\030\203\032\166\033\200\045" +
    "\175\001\002\000\006\003\022\004\017\001\002\000\030" +
    "\003\ufffb\004\ufffb\015\ufffb\023\ufffb\030\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\042\ufffb\045\ufffb\046\ufffb\001\002\000\006" +
    "\022\023\041\174\001\002\000\030\003\ufffc\004\ufffc\015" +
    "\ufffc\023\ufffc\030\ufffc\032\ufffc\033\ufffc\034\ufffc\042\ufffc" +
    "\045\ufffc\046\ufffc\001\002\000\004\037\230\001\002\000" +
    "\024\003\uffdb\004\uffdb\024\uffdb\025\uffdb\030\uffdb\032\uffdb" +
    "\033\uffdb\042\uffdb\045\uffdb\001\002\000\024\003\uffd9\004" +
    "\uffd9\024\uffd9\025\uffd9\030\uffd9\032\uffd9\033\uffd9\042\uffd9" +
    "\045\uffd9\001\002\000\036\002\uffd7\003\uffd7\004\uffd7\015" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\030\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\042\uffd7\045\uffd7\046\uffd7\001\002\000\020\003" +
    "\uffd6\004\uffd6\030\uffd6\032\uffd6\033\uffd6\042\uffd6\045\uffd6" +
    "\001\002\000\012\007\222\010\224\011\223\031\221\001" +
    "\002\000\004\037\211\001\002\000\004\041\210\001\002" +
    "\000\024\003\uffd8\004\uffd8\024\uffd8\025\uffd8\030\uffd8\032" +
    "\uffd8\033\uffd8\042\uffd8\045\uffd8\001\002\000\024\003\uffda" +
    "\004\uffda\024\uffda\025\uffda\030\uffda\032\uffda\033\uffda\042" +
    "\uffda\045\uffda\001\002\000\024\003\uffdc\004\uffdc\024\uffdc" +
    "\025\uffdc\030\uffdc\032\uffdc\033\uffdc\042\uffdc\045\uffdc\001" +
    "\002\000\024\003\uffd4\004\uffd4\024\uffd4\025\uffd4\030\uffd4" +
    "\032\uffd4\033\uffd4\042\uffd4\045\uffd4\001\002\000\014\004" +
    "\045\005\042\006\046\035\060\037\047\001\002\000\006" +
    "\036\071\040\213\001\002\000\014\003\205\004\110\030" +
    "\203\032\166\045\175\001\002\000\006\024\215\025\216" +
    "\001\002\000\014\003\205\004\110\030\203\032\166\045" +
    "\175\001\002\000\024\003\uffd3\004\uffd3\024\uffd3\025\uffd3" +
    "\030\uffd3\032\uffd3\033\uffd3\042\uffd3\045\uffd3\001\002\000" +
    "\004\025\220\001\002\000\024\003\uffd2\004\uffd2\024\uffd2" +
    "\025\uffd2\030\uffd2\032\uffd2\033\uffd2\042\uffd2\045\uffd2\001" +
    "\002\000\014\004\045\005\042\006\046\035\060\037\047" +
    "\001\002\000\012\004\045\005\042\006\046\037\047\001" +
    "\002\000\004\041\uffcc\001\002\000\012\004\045\005\042" +
    "\006\046\037\047\001\002\000\006\013\117\041\uffcd\001" +
    "\002\000\006\013\117\041\uffce\001\002\000\006\036\071" +
    "\041\uffcf\001\002\000\014\004\045\005\042\006\046\035" +
    "\060\037\047\001\002\000\006\036\071\040\232\001\002" +
    "\000\014\003\205\004\110\030\203\032\166\045\175\001" +
    "\002\000\004\025\234\001\002\000\024\003\uffd1\004\uffd1" +
    "\024\uffd1\025\uffd1\030\uffd1\032\uffd1\033\uffd1\042\uffd1\045" +
    "\uffd1\001\002\000\010\015\013\023\012\034\uffeb\001\002" +
    "\000\006\022\uffe1\040\uffe1\001\002\000\004\037\240\001" +
    "\002\000\014\003\157\015\013\023\012\034\uffeb\040\uffe2" +
    "\001\002\000\004\040\242\001\002\000\004\032\243\001" +
    "\002\000\026\003\ufffa\004\ufffa\015\ufffa\023\ufffa\030\ufffa" +
    "\032\ufffa\034\ufffa\042\ufffa\045\ufffa\046\ufffa\001\002\000" +
    "\026\003\uffd5\004\uffd5\015\013\023\012\030\uffd5\032\uffd5" +
    "\034\uffeb\042\uffd5\045\uffd5\046\150\001\002\000\016\003" +
    "\205\004\110\030\203\032\166\042\247\045\175\001\002" +
    "\000\004\033\252\001\002\000\014\004\045\005\042\006" +
    "\046\035\060\037\047\001\002\000\006\036\071\041\251" +
    "\001\002\000\004\033\uffd0\001\002\000\032\002\uffe5\003" +
    "\uffe5\004\uffe5\015\uffe5\023\uffe5\030\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\042\uffe5\045\uffe5\046\uffe5\001\002\000\006\002" +
    "\uffe7\046\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\004\002\004\001\001\000\004\003\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\014\012\015\013\013\001\001\000\006\014" +
    "\145\015\146\001\001\000\006\012\144\013\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\017\007" +
    "\020\001\001\000\002\001\001\000\004\010\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\033\126\034" +
    "\056\035\043\036\037\037\042\040\054\041\051\042\052" +
    "\043\047\044\040\045\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\032\050\033\036\034\056\035" +
    "\043\036\037\037\042\040\054\041\051\042\052\043\047" +
    "\044\040\045\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\076\001\001\000\002\001" +
    "\001\000\030\033\072\034\056\035\043\036\037\037\042" +
    "\040\054\041\051\042\052\043\047\044\040\045\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\035\060\036\037" +
    "\037\042\040\054\041\051\042\052\043\047\044\040\045" +
    "\053\001\001\000\002\001\001\000\024\035\062\036\037" +
    "\037\042\040\054\041\051\042\052\043\047\044\040\045" +
    "\053\001\001\000\002\001\001\000\014\041\051\042\052" +
    "\043\047\044\040\045\064\001\001\000\002\001\001\000" +
    "\030\033\067\034\056\035\043\036\037\037\042\040\054" +
    "\041\051\042\052\043\047\044\040\045\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\034\071\035\043" +
    "\036\037\037\042\040\054\041\051\042\052\043\047\044" +
    "\040\045\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\037\120\040\054\041\051\042" +
    "\052\043\047\044\040\045\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\110\001\001\000\032\033" +
    "\101\034\056\035\043\036\037\037\042\040\054\041\051" +
    "\042\052\043\047\044\040\045\053\046\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\033\106\034\056\035\043\036\037\037\042\040\054\041" +
    "\051\042\052\043\047\044\040\045\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\076\001\001\000" +
    "\002\001\001\000\020\037\114\040\054\041\051\042\052" +
    "\043\047\044\040\045\053\001\001\000\004\041\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\040\117\041\051\042\052\043\047\044\040\045" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\037\123\040\054\041\051\042\052\043" +
    "\047\044\040\045\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\135" +
    "\011\134\012\015\013\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\136\012\015\013\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\252\001\001\000\002\001\001\000" +
    "\006\012\150\013\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\160\012\015\013" +
    "\013\016\157\017\154\020\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\162\001\001\000\002\001\001" +
    "\000\004\022\164\001\001\000\002\001\001\000\004\004" +
    "\166\001\001\000\014\011\170\012\015\013\013\015\171" +
    "\027\167\001\001\000\020\021\200\022\206\023\175\024" +
    "\205\025\176\030\203\041\201\001\001\000\006\005\172" +
    "\007\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\033\211\034\056\035\043\036\037\037\042\040\054" +
    "\041\051\042\052\043\047\044\040\045\053\001\001\000" +
    "\002\001\001\000\020\021\213\022\206\023\175\024\205" +
    "\025\176\030\203\041\201\001\001\000\002\001\001\000" +
    "\020\021\216\022\206\023\175\024\205\025\176\030\203" +
    "\041\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\033\226\034\056\035\043\036\037" +
    "\037\042\040\054\041\051\042\052\043\047\044\040\045" +
    "\053\001\001\000\020\037\225\040\054\041\051\042\052" +
    "\043\047\044\040\045\053\001\001\000\002\001\001\000" +
    "\020\037\224\040\054\041\051\042\052\043\047\044\040" +
    "\045\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\033\230\034\056\035\043\036\037" +
    "\037\042\040\054\041\051\042\052\043\047\044\040\045" +
    "\053\001\001\000\002\001\001\000\020\021\232\022\206" +
    "\023\175\024\205\025\176\030\203\041\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\160\012\015" +
    "\013\013\020\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\160\012\015\013\013\016\240\017\154" +
    "\020\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\243\001\001\000\014\011\170\012\015\013\013" +
    "\015\171\027\244\001\001\000\022\021\200\022\206\023" +
    "\175\024\205\025\176\026\245\030\203\041\201\001\001" +
    "\000\002\001\001\000\030\033\247\034\056\035\043\036" +
    "\037\037\042\040\054\041\051\042\052\043\047\044\040" +
    "\045\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public boolean syntaxErrors;


  AnalizadorLexico alex;
 
  public AnalizadorSintactico(AnalizadorLexico alex, ComplexSymbolFactory sf) {
    super(alex,sf);
    alex = alex;
  }
  
  /*
  public void report_error(String m, Object info){
	try {
		GestionExcepciones.gestionaError(m);
	} catch (IOException e) {
		System.out.println(m + "hola");
		done_parsing();
	}
  }
  /*
  public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error");
  }
  */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= GLOBALS listaDeclaracionVariables CODE listaDeclaracionFunciones 
            {
              Programa RESULT =null;
		Location dvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location dvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		LinkedList<ListaVariables> dv = (LinkedList<ListaVariables>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location dfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location dfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		LinkedList<DeclaracionFuncion> df = (LinkedList<DeclaracionFuncion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Programa(dv,df); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= error 
            {
              Programa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaDeclaracionVariables ::= listaDeclaracionVariables tipo listaVariables SEMI 
            {
              LinkedList<ListaVariables> RESULT =null;
		Location dvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location dvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		LinkedList<ListaVariables> dv = (LinkedList<ListaVariables>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location ivxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location ivxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		ListaVariables iv = (ListaVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 dv.add(iv.tipar(t)); RESULT = dv; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVariables",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listaDeclaracionVariables ::= 
            {
              LinkedList<ListaVariables> RESULT =null;
		 RESULT =  new LinkedList<ListaVariables>(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVariables",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listaDeclaracionVarFun ::= listaDeclaracionVarFun tipo listaVariables SEMI 
            {
              ListaDecVarFun RESULT =null;
		Location dvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location dvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		ListaDecVarFun dv = (ListaDecVarFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location ivxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location ivxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		ListaVariables iv = (ListaVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 dv.addListaVar(iv.tipar(t)); RESULT = dv; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVarFun",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listaDeclaracionVarFun ::= listaDeclaracionVarFun declaracionFuncion 
            {
              ListaDecVarFun RESULT =null;
		Location dvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location dvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		ListaDecVarFun dv = (ListaDecVarFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location dfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location dfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		DeclaracionFuncion df = (DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 dv.addFun(df); RESULT = dv; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVarFun",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaDeclaracionVarFun ::= 
            {
              ListaDecVarFun RESULT =null;
		 RESULT =  new ListaDecVarFun(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVarFun",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaVariables ::= listaVariables COMMA variable 
            {
              ListaVariables RESULT =null;
		Location ivxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location ivxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		ListaVariables iv = (ListaVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 iv.add(v); RESULT = iv; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaVariables",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaVariables ::= variable 
            {
              ListaVariables RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 ListaVariables aux = new ListaVariables(); aux.add(v); RESULT = aux; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaVariables",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaVariables ::= error 
            {
              ListaVariables RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaVariables",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable ::= ID 
            {
              Variable RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Variable(new Identificador(ixleft,i,ixright)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable ::= ID EQUAL expresionSimple 
            {
              Variable RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Variable(new Identificador(ixleft,i,ixright), e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable ::= ID listaDimensiones 
            {
              Variable RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		LinkedList<Integer> ld = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Variable(new Identificador(ixleft,i,ixright), ld); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable ::= ID listaDimensiones EQUAL expresionArray 
            {
              Variable RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		LinkedList<Integer> ld = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location eaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location eaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		LinkedList<ExpresionSimple> ea = (LinkedList<ExpresionSimple>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Variable(new Identificador(ixleft,i,ixright), ld, ea); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaDimensiones ::= listaDimensiones BRACKETOP CONSTENT BRACKETCL 
            {
              LinkedList<Integer> RESULT =null;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		LinkedList<Integer> ld = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 ld.add(c); RESULT = ld; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaDimensiones",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaDimensiones ::= BRACKETOP CONSTENT BRACKETCL 
            {
              LinkedList<Integer> RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 LinkedList<Integer> aux = new LinkedList<Integer>(); aux.add(c); RESULT = aux; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaDimensiones",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listaDimensiones ::= error 
            {
              LinkedList<Integer> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 GestionExcepciones.gestionaError("Error: dimension list badly written at line " + exleft.getLine() + ", column " + exleft.getColumn() + "\n"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaDimensiones",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= CONST tipoSimple 
            {
              Tipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 t.constante(true); RESULT = t; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= tipoSimple 
            {
              Tipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipoSimple ::= TYPEPRIM 
            {
              Tipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Tipo(t); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipoSimple",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipoSimple ::= tipoStruct STRUCT BRACEOP listaStruct BRACECL 
            {
              Tipo RESULT =null;
		Location auxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xleft;
		Location auxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xright;
		TipoStruct aux = (TipoStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Location lvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location lvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Hashtable<String,ClaseAux> lv = (Hashtable<String,ClaseAux>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 aux.tomaLista(lv); RESULT = aux; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipoSimple",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipoStruct ::= 
            {
              TipoStruct RESULT =null;
		 RESULT = new TipoStruct(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipoStruct",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listaStruct ::= listaStruct tipo ID SEMI 
            {
              Hashtable<String,ClaseAux> RESULT =null;
		Location lsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location lsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		Hashtable<String,ClaseAux> ls = (Hashtable<String,ClaseAux>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 ls.put(id,new ClaseAux(t)); RESULT = ls; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaStruct",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaStruct ::= tipo ID SEMI 
            {
              Hashtable<String,ClaseAux> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 Hashtable<String,ClaseAux> aux = new Hashtable<String,ClaseAux>(); aux.put(id,new ClaseAux(t)); RESULT = aux; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaStruct",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaStruct ::= error 
            {
              Hashtable<String,ClaseAux> RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaStruct",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaDeclaracionFunciones ::= listaDeclaracionFunciones declaracionFuncion 
            {
              LinkedList<DeclaracionFuncion> RESULT =null;
		Location lfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location lfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		LinkedList<DeclaracionFuncion> lf = (LinkedList<DeclaracionFuncion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		DeclaracionFuncion f = (DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 lf.add(f); RESULT = lf; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionFunciones",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listaDeclaracionFunciones ::= declaracionFuncion 
            {
              LinkedList<DeclaracionFuncion> RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		DeclaracionFuncion f = (DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 LinkedList<DeclaracionFuncion> aux = new LinkedList<DeclaracionFuncion>(); aux.add(f); RESULT = aux; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionFunciones",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracionFuncion ::= FUN tipoSimple ID POP parametros PCL BRACEOP listaDeclaracionVarFun listaInst instRetorno BRACECL 
            {
              DeclaracionFuncion RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).xright;
		Parametros p = (Parametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		ListaDecVarFun l = (ListaDecVarFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location lixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location lixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location iixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location iixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		InstRetorno ii = (InstRetorno)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new DeclaracionFuncion(t, p, new Identificador(ixleft,i,ixright), new InstCompuesta(l,li),ii); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracionFuncion",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracionFuncion ::= FUN VOID ID POP parametros PCL instCompuesta 
            {
              DeclaracionFuncion RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		Parametros p = (Parametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location inxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location inxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		InstCompuesta in = (InstCompuesta)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new DeclaracionFuncion(p, new Identificador(ixleft,i,ixright), in); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracionFuncion",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= listaParametros 
            {
              Parametros RESULT =null;
		Location lpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location lpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		LinkedList<Parametro> lp = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Parametros(lp); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros ::= 
            {
              Parametros RESULT =null;
		 RESULT = new Parametros(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaParametros ::= listaParametros COMMA parametro 
            {
              LinkedList<Parametro> RESULT =null;
		Location lpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location lpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		LinkedList<Parametro> lp = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 lp.add(p); RESULT = lp; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaParametros ::= parametro 
            {
              LinkedList<Parametro> RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 LinkedList<Parametro> aux = new LinkedList<Parametro>(); aux.add(p); RESULT = aux; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listaParametros ::= error 
            {
              LinkedList<Parametro> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 GestionExcepciones.gestionaError("Error: parameter list badly written at line " + exleft.getLine() + ", column " + exleft.getColumn() + "\n");   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametro ::= tipo ID 
            {
              Parametro RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Parametro(new Identificador(ixleft,i,ixright),t);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametro ::= tipo ID listaDimensiones 
            {
              Parametro RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		LinkedList<Integer> ld = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Parametro(new Identificador(ixleft,i,ixright),t,ld);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= instCompuesta 
            {
              Instruccion RESULT =null;
		Location icxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location icxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		InstCompuesta ic = (InstCompuesta)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ic; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= instExpresion 
            {
              Instruccion RESULT =null;
		Location iexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location iexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		InstExpresion ie = (InstExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ie; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= instSeleccion 
            {
              Instruccion RESULT =null;
		Location isxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location isxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		InstSeleccion is = (InstSeleccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = is; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= instIteracion 
            {
              Instruccion RESULT =null;
		Location iixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location iixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		InstIteracion ii = (InstIteracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ii; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= error 
            {
              Instruccion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 GestionExcepciones.gestionaError("Error: invalid statement at line " + exleft.getLine() +",column " + exleft.getColumn() + "\n");   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instCompuesta ::= BRACEOP listaDeclaracionVarFun listaInst BRACECL 
            {
              InstCompuesta RESULT =null;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		ListaDecVarFun ld = (ListaDecVarFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location lixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location lixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new InstCompuesta(ld, li); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instCompuesta",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listaInst ::= listaInst instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		Location lixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location lixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 li.add(i); RESULT = li; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaInst",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listaInst ::= 
            {
              LinkedList<Instruccion> RESULT =null;
		 RESULT = new LinkedList<Instruccion>(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaInst",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instExpresion ::= expresion SEMI 
            {
              InstExpresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new InstExpresion(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instExpresion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instSeleccion ::= IF POP expresionSimple PCL instruccion END 
            {
              InstSeleccion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new InstSeleccion(e,i); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instSeleccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instSeleccion ::= IF POP expresionSimple PCL instruccion ELSE instruccion END 
            {
              InstSeleccion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		Location i1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location i1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		Instruccion i1 = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location i2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location i2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Instruccion i2 = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new InstSeleccion(e, i1, i2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instSeleccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instIteracion ::= WHILE POP expresionSimple PCL instruccion END 
            {
              InstIteracion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new InstIteracion(e,i); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instIteracion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instRetorno ::= RETURN expresionSimple SEMI 
            {
              InstRetorno RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new InstRetorno(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instRetorno",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= modificable EQUAL expresionSimple 
            {
              Expresion RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		ExpresionSimple m = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location eqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location eqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Expresion(m, e, eqxleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= modificable EQUALWITHOPSUM expresionAritmetica 
            {
              Expresion RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		ExpresionSimple m = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location iopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location iopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Integer iop = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Modificable m2=((Modificable)m).copia(); m2.parteDerecha(true); RESULT = new Expresion(m, new ExpresionAritmetica(m2,iop,e), iopxleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= modificable EQUALWITHOPMUL expresionAritmetica 
            {
              Expresion RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		ExpresionSimple m = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location iopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location iopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Integer iop = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Modificable m2=((Modificable)m).copia(); m2.parteDerecha(true); RESULT = new Expresion(m, new Termino(m2,iop,e), iopxleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= modificable INCREMENT 
            {
              Expresion RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		ExpresionSimple m = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Expresion(m, i, ixleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresionArray ::= BRACEOP listaExpresionesArray BRACECL 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		Location lvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location lvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		LinkedList<ExpresionSimple> lv = (LinkedList<ExpresionSimple>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = lv; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionArray",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresionArray ::= error 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 GestionExcepciones.gestionaError("Error: array initialization list was badly written at line " + exleft.getLine() +",column " + exleft.getColumn() + "\n");   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionArray",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listaExpresionesArray ::= listaExpresionesArray COMMA expresionSimple 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		Location lexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location lexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		LinkedList<ExpresionSimple> le = (LinkedList<ExpresionSimple>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 le.add(e); RESULT = le; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaExpresionesArray",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listaExpresionesArray ::= expresionSimple 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 LinkedList<ExpresionSimple> aux = new LinkedList<ExpresionSimple>(); aux.add(e); RESULT = aux; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaExpresionesArray",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listaExpresionesArray ::= error 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 GestionExcepciones.gestionaError("Error: array initialization list was badly written at line " + exleft.getLine() +",column " + exleft.getColumn() + "\n");   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaExpresionesArray",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresionSimple ::= expresionSimple OR expresionConj 
            {
              ExpresionSimple RESULT =null;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		ExpresionSimple es = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location ecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple ec = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT =  new ExpresionSimple(es, ec); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionSimple",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresionSimple ::= expresionConj 
            {
              ExpresionSimple RESULT =null;
		Location ecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple ec = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ec;  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionSimple",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresionConj ::= expresionConj AND expresionUnariaORelacional 
            {
              ExpresionSimple RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		ExpresionSimple c = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location eurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location eurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple eur = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ExpresionConj(c, eur); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionConj",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresionConj ::= expresionUnariaORelacional 
            {
              ExpresionSimple RESULT =null;
		Location eurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location eurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple eur = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = eur;  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionConj",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresionUnariaORelacional ::= NO expresionUnariaORelacional 
            {
              ExpresionSimple RESULT =null;
		Location eurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location eurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple eur = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ExpresionUnariaORelacional(eur,  eurxleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionUnariaORelacional",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresionUnariaORelacional ::= expresionRelacional 
            {
              ExpresionSimple RESULT =null;
		Location erxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location erxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple er = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = er;   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionUnariaORelacional",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresionRelacional ::= expresionAritmetica OPRELATIONAL expresionAritmetica 
            {
              ExpresionSimple RESULT =null;
		Location ea1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location ea1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		ExpresionSimple ea1 = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location ea2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ea2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple ea2 = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ExpresionRelacional(ea1, op, ea2, opxleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionRelacional",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresionRelacional ::= expresionAritmetica 
            {
              ExpresionSimple RESULT =null;
		Location eaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location eaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple ea = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ea; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionRelacional",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresionAritmetica ::= expresionAritmetica OPSUM termino 
            {
              ExpresionSimple RESULT =null;
		Location eaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location eaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		ExpresionSimple ea = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple t = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ExpresionAritmetica(ea, op, t, opxleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresionAritmetica ::= termino 
            {
              ExpresionSimple RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple t = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // termino ::= termino OPMUL factor 
            {
              ExpresionSimple RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		ExpresionSimple t = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location euxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location euxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple eu = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Termino(t, op, eu);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // termino ::= factor 
            {
              ExpresionSimple RESULT =null;
		Location euxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location euxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple eu = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = eu; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= inmodificable 
            {
              ExpresionSimple RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple i = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = i; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= modificable 
            {
              ExpresionSimple RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple m = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 m.parteDerecha(true); RESULT = m; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // modificable ::= ID 
            {
              ExpresionSimple RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Modificable(new Identificador(ixleft,i,ixright)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("modificable",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // modificable ::= ID listaModificable 
            {
              ExpresionSimple RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		LinkedList<ExpresionSimple> e = (LinkedList<ExpresionSimple>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Modificable(new Identificador(ixleft,i,ixright), e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("modificable",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // modificable ::= ID ARROW modificable 
            {
              ExpresionSimple RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple m = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Modificable(new Identificador(ixleft,i,ixright), m); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("modificable",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // modificable ::= ID listaModificable ARROW modificable 
            {
              ExpresionSimple RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		LinkedList<ExpresionSimple> e = (LinkedList<ExpresionSimple>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple m = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Modificable(new Identificador(ixleft,i,ixright), e, m); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("modificable",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // inmodificable ::= POP expresionSimple PCL 
            {
              ExpresionSimple RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inmodificable",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inmodificable ::= llamada 
            {
              ExpresionSimple RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple l = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = l; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inmodificable",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // inmodificable ::= constante 
            {
              ExpresionSimple RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple c = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = c; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inmodificable",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llamada ::= ID POP listaArgumentos PCL 
            {
              ExpresionSimple RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		LinkedList<ExpresionSimple> l = (LinkedList<ExpresionSimple>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Llamada(new Identificador(ixleft,i,ixright), l); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamada",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // listaArgumentos ::= listaArgumentos COMMA expresionSimple 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		Location laxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location laxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		LinkedList<ExpresionSimple> la = (LinkedList<ExpresionSimple>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 la.add(e); RESULT = la; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaArgumentos",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listaArgumentos ::= expresionSimple 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		ExpresionSimple e = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 LinkedList<ExpresionSimple> aux = new LinkedList<ExpresionSimple>(); aux.add(e); RESULT = aux; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaArgumentos",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // listaArgumentos ::= 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		 RESULT = new LinkedList<ExpresionSimple>(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaArgumentos",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // listaArgumentos ::= error 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 GestionExcepciones.gestionaError("Error: invalid argument list at line " + exleft.getLine() +",column " + exleft.getColumn() + "\n");   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaArgumentos",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // listaModificable ::= listaModificable BRACKETOP expresionAritmetica BRACKETCL 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		LinkedList<ExpresionSimple> ld = (LinkedList<ExpresionSimple>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		ExpresionSimple c = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 ld.add(c); RESULT = ld; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaModificable",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // listaModificable ::= BRACKETOP expresionAritmetica BRACKETCL 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		ExpresionSimple c = (ExpresionSimple)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 LinkedList<ExpresionSimple> aux = new LinkedList<ExpresionSimple>(); aux.add(c); RESULT = aux; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaModificable",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // listaModificable ::= error 
            {
              LinkedList<ExpresionSimple> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 GestionExcepciones.gestionaError("Error: invalid access to array at line " + exleft.getLine() +",column " + exleft.getColumn() + "\n");   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listaModificable",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // constante ::= CONSTENT 
            {
              ExpresionSimple RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Constante(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("constante",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // constante ::= CONSTBOOL 
            {
              ExpresionSimple RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Constante(b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("constante",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
